#include <iostream>
#include <vector>
#include <stdio.h>

using namespace std;

#define N 1000
#define M 100000

bool butterfly[N];//0 - type A, 1 - type B
bool visit[N];
int judge[M][3];

void bfs(int s, vector<vector<int> >& graph) {
	if (!visit[s]) {
		bool tag = butterfly[s];
		visit[s] = true;
		int i, n = graph[s].size();
		for (i = 0; i < n; i += 2)
			butterfly[graph[s][i]] = (graph[s][i + 1] == 1 ? !tag : tag);
		for (i = 0; i < n; i += 2)
			bfs(graph[s][i], graph);
		graph[s].clear();
	}
}

void label(int n, vector<vector<int> >& graph) {
	for (int i = 0; i < n; i++) {
		if (!visit[i])
			bfs(i, graph);
	}
}

void check(int m) {
	int a, b, i;
	for (i = 0; i < m; i++) {
		a = judge[i][0];
		b = judge[i][1];
		if (judge[i][2]) {//different
			if (butterfly[a] == butterfly[b]) {
				printf("NO\n");
				return;
			}
		}
		else {
			if (butterfly[a] != butterfly[b]) {
				printf("NO\n");
				return;
			}
		}
	}
	printf("YES\n");
}

int main() {
	int a, b, tag;
	int i, m, n;
	for (i = 0; i < N; i++) visit[i] = true;
	vector<vector<int> > graph;
	for (; scanf("%d %d", &n, &m) != EOF; ) {
		graph.resize(n);
		for (i = 0; i<m; i++) {
			scanf("%d %d %d", &a, &b, &tag);
			visit[a] = visit[b] = false;
			judge[i][0] = a;
			judge[i][1] = b;
			judge[i][2] = tag;
			graph[a].push_back(b);
			graph[a].push_back(tag);
		}
		label(n, graph);
		check(m);
	}
	return 0;
}



#include <iostream>  
using namespace std;

#define N 1005  

struct NODE {
	int p, r;
};

NODE node[N];

void init(int n) {
	for (int i = 0; i<n; i++) {
		node[i].p = i;
		node[i].r = 0;
	}
}

int FindParent(int i) {
	if (i == node[i].p)
		return i;
	int ip = node[i].p;
	node[i].p = FindParent(ip);
	node[i].r = (node[i].r == node[ip].r ? 0 : 1);
	return node[i].p;
}

int main() {
	bool bug;
	int n, m, i, k, a, b, ap, bp;
	while (cin >> n >> m) {
		init(n);
		bug = false;
		for (i = 1; i <= m; i++) {
			cin >> a >> b >> k;
			ap = FindParent(a);
			bp = FindParent(b);
			if (ap == bp) {
				if ((k == 0 && node[a].r != node[b].r) || (k == 1 && node[a].r == node[b].r))
					bug = true;
			}
			else {
				node[bp].p = ap;
				if (k == 0)
					node[bp].r = (node[a].r == node[b].r ? 0 : 1);
				else
					node[bp].r = (node[a].r == node[b].r ? 1 : 0);
			}
		}
		if (bug)	cout << "NO\n";
		else		cout << "YES\n";
	}
	return 0;
}
