#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <algorithm>
#include <queue>
#include <math.h>
#include <unordered_map>

using namespace std;

const int N = 30;
const int INF = 2147483647;

typedef unordered_map<string, int> map;
typedef map::iterator iter;

map store;
int n, s, t;
double d[N];
int c[N];
queue <int> q;
double graph[N][N];
bool vis[N];

void init() {
	int i, j;
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++)
			graph[i][j] = INF;
	}
}

int getI(string& str) {
	iter tmp = store.find(str);
	if (tmp == store.end())
		return -1;
	return tmp->second;
}

int spfa_bfs() {
	queue <int> q;
	for (int i = 0; i < n; i++) {
		c[i] = 0;
		d[i] = INF;
		vis[i] = false;
	}
	q.push(s);
	vis[s] = true;
	c[s] = 1;
	d[s] = 0;
	while (!q.empty()) {
		int x = q.front();
		q.pop();
		vis[x] = false;
		for (int k = 0; k < n; k++) {
			double w = graph[x][k];
			if (w != INF) {
				if (d[x] + w < d[k]) {
					d[k] = d[x] + w;
					if (!vis[k]) {
						vis[k] = true;
						c[k]++;
						q.push(k);
						if (c[k]>n)
							return true;
					}
				}
			}
		}
	}
	return false;
}

int main() {
	int i, m, x, y, c = 1;
	double rate;
	string cur1, cur2;
	while (cin >> n && n) {
		for (i = 0; i < n; i++) {
			cin >> cur1;
			store[cur1] = i;
		}
		init();
		cin >> m;
		for (i = 0; i < m; i++) {
			cin >> cur1 >> rate >> cur2;
			x = getI(cur1);
			y = getI(cur2);
			graph[x][y] = -log(rate);
		}
		cout << "Case " << c;
		if (spfa_bfs())
			cout << ": Yes" << endl;
		else
			cout << ": No" << endl;
		c++;
	}
	return 0;
}
