#include <iostream>
#include <string>
#include <vector>
#include <stdio.h>
#include <algorithm>
#include <unordered_map>

using namespace std;

const int N = 30;
const int INF = 2147483647;

typedef unordered_map<string, int> map;
typedef map::iterator iter;

int n;
map store;
double dis[N];

typedef struct Edge
{
	int u, v;
	double rate;
} Edge;
Edge edge[N];

int getI(string& str) {
	iter tmp = store.find(str);
	if (tmp == store.end())
		return -1;
	return tmp->second;
}

bool check() {
	for (int i = 0; i < n; i++)	dis[i] = INF;
	for (int i = 0; i <n - 1; i++)
		for (int j = 0; j < n; j++) {
			if (dis[j] > dis[edge[j].u] * edge[j].rate)
				dis[edge[j].v] = dis[edge[j].u] * edge[j].rate;
		}
	bool flag = 0;
	for (int i = 0; i <n; i++)
		if (dis[edge[i].v] > dis[edge[i].u] * edge[i].rate) {
			flag = 1;
			break;
		}
	return flag;
}

int main() {
	int i, m, c = 1;
	bool ans;
	double rate;
	string cur1, cur2;
	while (cin >> n && n) {
		for (i = 0; i < n; i++) {
			cin >> cur1;
			store[cur1] = i;
		}
		cin >> m;
		for (i = 0; i < m; i++) {
			cin >> cur1 >> rate >> cur2;
			edge[i].u = getI(cur1);
			edge[i].v = getI(cur2);
			edge[i].rate = rate;
		}
		cout << "Case " << c;
		if (check())
			cout << ": Yes" << endl;
		else
			cout << ": No" << endl;
		c++;
	}
	return 0;
}




